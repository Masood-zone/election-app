// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model voters {
  studentId   String   @id 
  studentName String?
  email       String?  @unique
  telephone   String?
  password    String?
  role        String   @default("USER")
  del_flg     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  voting      voting[]
}

model positions {
  id           String       @id @default(uuid())  
  positionName String       @unique
  description  String?
  del_flg      Boolean      @default(false)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  candidates   candidates[]
  voting       voting[]
  elections    ElectionPosition[]
}

model candidates {
  id            String     @id @default(uuid()) 
  candidateName String     @unique
  telephone     String?
  profile       String?
  positions     positions? @relation(fields: [positionId], references: [id])
  positionId    String? @default(uuid())  // Ensure it matches positions.id
  del_flag      Boolean    @default(false)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  voting        voting[]
  manifesto     String?    // Candidate's election promises/platform
  biography     String?    // Short bio of the candidate
}

model voting {
  id          String      @id @default(uuid())
  positions   positions?  @relation(fields: [positionId], references: [id])
  positionId  String? @default(uuid())  // Ensure it matches positions.id
  candidates  candidates? @relation(fields: [candidateId], references: [id])
  candidateId String? @default(uuid())  // Ensure it matches candidates.id
  voters      voters?     @relation(fields: [voterId], references: [studentId])
  voterId     String? @default(uuid())  // Ensure it matches voters.studentId
  election    Election?   @relation(fields: [electionId], references: [id])
  electionId  String?
  timestamp   DateTime    @default(now())
}

model user {
  id        String @id @default(uuid()) 
  fullName  String
  email     String @unique
  password  String
  telephone String
  role      String @default("ADMIN")
}

model Election {
  id              String            @id @default(uuid())
  title           String
  description     String?
  startDate       DateTime
  endDate         DateTime
  status          ElectionStatus    @default(UPCOMING)
  isActive        Boolean           @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  positions       ElectionPosition[]
  votes           voting[]
  announcements   Announcement[]
  settings        ElectionSettings?
}

enum ElectionStatus {
  UPCOMING
  ONGOING
  COMPLETED
  CANCELLED
}

model ElectionPosition {
  id          String    @id @default(uuid())
  election    Election  @relation(fields: [electionId], references: [id])
  electionId  String
  position    positions @relation(fields: [positionId], references: [id])
  positionId  String
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([electionId, positionId])
}

model ElectionSettings {
  id                  String    @id @default(uuid())
  election            Election  @relation(fields: [electionId], references: [id])
  electionId          String    @unique
  allowMultipleVotes  Boolean   @default(false)  // Can a voter vote multiple times?
  resultsVisibility   String    @default("AFTER_END")  // Options: REAL_TIME, AFTER_END, ADMIN_ONLY
  requireVerification Boolean   @default(true)   // Require voter verification?
  allowAbstention     Boolean   @default(false)  // Allow voters to abstain?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model Announcement {
  id          String    @id @default(uuid())
  election    Election  @relation(fields: [electionId], references: [id])
  electionId  String
  title       String
  content     String
  isPublished Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Analytics {
  id                String   @id @default(uuid())
  date              DateTime @default(now())
  totalVoters       Int      @default(0)
  totalCandidates   Int      @default(0)
  totalPositions    Int      @default(0)
  activeElections   Int      @default(0)
  completedElections Int     @default(0)
  totalVotesCast    Int      @default(0)
  voterTurnout      Float    @default(0)  // Percentage
  createdAt         DateTime @default(now())
}
